package com.hengye.share.model.greenrobot;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hengye.share.model.greenrobot.Follower;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLLOWER".
*/
public class FollowerDao extends AbstractDao<Follower, Long> {

    public static final String TABLENAME = "FOLLOWER";

    /**
     * Properties of entity Follower.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Tid = new Property(2, String.class, "tid", false, "TID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property PinyinName = new Property(4, String.class, "pinyinName", false, "PINYIN_NAME");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Verified = new Property(8, Integer.class, "verified", false, "VERIFIED");
        public final static Property VerifiedType = new Property(9, Integer.class, "verifiedType", false, "VERIFIED_TYPE");
        public final static Property Following = new Property(10, Integer.class, "following", false, "FOLLOWING");
        public final static Property FollowMe = new Property(11, Integer.class, "followMe", false, "FOLLOW_ME");
    };

    private DaoSession daoSession;


    public FollowerDao(DaoConfig config) {
        super(config);
    }
    
    public FollowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLLOWER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"TID\" TEXT NOT NULL ," + // 2: tid
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"PINYIN_NAME\" TEXT," + // 4: pinyinName
                "\"GENDER\" TEXT," + // 5: gender
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"VERIFIED\" INTEGER," + // 8: verified
                "\"VERIFIED_TYPE\" INTEGER," + // 9: verifiedType
                "\"FOLLOWING\" INTEGER," + // 10: following
                "\"FOLLOW_ME\" INTEGER);"); // 11: followMe
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLLOWER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Follower entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindString(3, entity.getTid());
        stmt.bindString(4, entity.getName());
 
        String pinyinName = entity.getPinyinName();
        if (pinyinName != null) {
            stmt.bindString(5, pinyinName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        Integer verified = entity.getVerified();
        if (verified != null) {
            stmt.bindLong(9, verified);
        }
 
        Integer verifiedType = entity.getVerifiedType();
        if (verifiedType != null) {
            stmt.bindLong(10, verifiedType);
        }
 
        Integer following = entity.getFollowing();
        if (following != null) {
            stmt.bindLong(11, following);
        }
 
        Integer followMe = entity.getFollowMe();
        if (followMe != null) {
            stmt.bindLong(12, followMe);
        }
    }

    @Override
    protected void attachEntity(Follower entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Follower readEntity(Cursor cursor, int offset) {
        Follower entity = new Follower( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.getString(offset + 2), // tid
            cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyinName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // verified
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // verifiedType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // following
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // followMe
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Follower entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setTid(cursor.getString(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setPinyinName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVerified(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setVerifiedType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFollowing(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFollowMe(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Follower entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Follower entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
