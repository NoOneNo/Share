package com.hengye.share.model.greenrobot;

import org.greenrobot.greendao.annotation.*;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.hengye.share.model.sina.WBGroup;
import com.hengye.share.model.sina.WBGroups;
import com.hengye.share.util.CommonUtil;

import java.util.ArrayList;
import java.util.List;
// KEEP INCLUDES END
/**
 * Entity mapped to table "GROUP_LIST".
 */
@Entity(active = true)
public class GroupList implements java.io.Serializable {

    @Id(autoincrement = true)
    private Long id;
    private int insertNumber;

    @NotNull
    private String uid;

    @NotNull
    private String gid;

    @NotNull
    private String title;

    @NotNull
    private String name;
    private Integer count;
    private Integer type;
    private Integer visible;
    private Integer remind;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient GroupListDao myDao;

    // KEEP FIELDS - put your custom fields here
    private static final long serialVersionUID = -6392501058996234508L;
    // KEEP FIELDS END

    @Generated
    public GroupList() {
    }

    public GroupList(Long id) {
        this.id = id;
    }

    @Generated
    public GroupList(Long id, int insertNumber, String uid, String gid, String title, String name, Integer count, Integer type, Integer visible, Integer remind) {
        this.id = id;
        this.insertNumber = insertNumber;
        this.uid = uid;
        this.gid = gid;
        this.title = title;
        this.name = name;
        this.count = count;
        this.type = type;
        this.visible = visible;
        this.remind = remind;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupListDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getInsertNumber() {
        return insertNumber;
    }

    public void setInsertNumber(int insertNumber) {
        this.insertNumber = insertNumber;
    }

    @NotNull
    public String getUid() {
        return uid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUid(@NotNull String uid) {
        this.uid = uid;
    }

    @NotNull
    public String getGid() {
        return gid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGid(@NotNull String gid) {
        this.gid = gid;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(@NotNull String title) {
        this.title = title;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getVisible() {
        return visible;
    }

    public void setVisible(Integer visible) {
        this.visible = visible;
    }

    public Integer getRemind() {
        return remind;
    }

    public void setRemind(Integer remind) {
        this.remind = remind;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    public static String getGroupIds(List<GroupList> data){
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < data.size(); i++) {
            sb.append(data.get(i).getGid());
            if (i != data.size() - 1){
                sb.append(",");
            }
        }
        return sb.toString();
    }

    public static List<GroupList> getGroupLists(WBGroups wbGroups, String uid){
        if(wbGroups == null || CommonUtil.isEmpty(wbGroups.getLists())){
            return null;
        }
        ArrayList<GroupList> groupLists = new ArrayList<>();
        List<WBGroup> wbGroupList = wbGroups.getLists();
        for(int i = 0; i < wbGroupList.size(); i++){
            groupLists.add(getGroupList(wbGroupList.get(i), uid, i));
        }
        return groupLists;
    }

    public static GroupList getGroupList(WBGroup wbGroup, String uid, int insertNumber){
        GroupList gl = new GroupList();
        gl.setInsertNumber(insertNumber);
        gl.setUid(uid);
        gl.setGid(wbGroup.getIdstr());
        gl.setTitle("我的分组");
        gl.setName(wbGroup.getName());
        gl.setCount(wbGroup.getMember_count());
        gl.setType(wbGroup.getGroypType());
        gl.setVisible(wbGroup.getVisible());
        gl.setRemind(0);
        return gl;
    }

    public static List<GroupList> orderGroupList(List<GroupList> groupLists){
        for(int i = 0; i < groupLists.size(); i++){
            GroupList gl = groupLists.get(i);
            gl.setId(null);
            gl.setInsertNumber(i);
        }
        return groupLists;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        GroupList groupList = (GroupList) o;

        if (uid != null ? !uid.equals(groupList.uid) : groupList.uid != null) return false;
        return !(gid != null ? !gid.equals(groupList.gid) : groupList.gid != null);

    }

    @Override
    public int hashCode() {
        int result = uid != null ? uid.hashCode() : 0;
        result = 31 * result + (gid != null ? gid.hashCode() : 0);
        return result;
    }
    // KEEP METHODS END

}
