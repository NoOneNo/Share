package com.hengye.share.model.greenrobot;

import com.hengye.share.model.greenrobot.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import de.greenrobot.dao.AbstractDao;

import com.hengye.share.model.Topic;
import com.hengye.share.util.CommonUtil;
import com.hengye.share.util.DataUtil;
// KEEP INCLUDES END
/**
 * Entity mapped to table "TOPIC_DRAFT".
 */
public class TopicDraft implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String content;
    private java.util.Date date;
    private String urls;
    /** Not-null value. */
    private String uid;
    private String targetTopicJson;
    private String targetTopicId;
    private String targetCommentId;
    private String targetCommentUserName;
    private String targetCommentContent;
    private Integer isCommentOrigin;
    private Integer isMention;
    private Integer type;
    private Integer parentType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TopicDraftDao myDao;


    // KEEP FIELDS - put your custom fields here
    private static final long serialVersionUID = -3380622281318260025L;

    private int notificationId = -1;
    // KEEP FIELDS END

    public TopicDraft() {
    }

    public TopicDraft(Long id) {
        this.id = id;
    }

    public TopicDraft(Long id, String content, java.util.Date date, String urls, String uid, String targetTopicJson, String targetTopicId, String targetCommentId, String targetCommentUserName, String targetCommentContent, Integer isCommentOrigin, Integer isMention, Integer type, Integer parentType) {
        this.id = id;
        this.content = content;
        this.date = date;
        this.urls = urls;
        this.uid = uid;
        this.targetTopicJson = targetTopicJson;
        this.targetTopicId = targetTopicId;
        this.targetCommentId = targetCommentId;
        this.targetCommentUserName = targetCommentUserName;
        this.targetCommentContent = targetCommentContent;
        this.isCommentOrigin = isCommentOrigin;
        this.isMention = isMention;
        this.type = type;
        this.parentType = parentType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTopicDraftDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getUrls() {
        return urls;
    }

    public void setUrls(String urls) {
        this.urls = urls;
    }

    /** Not-null value. */
    public String getUid() {
        return uid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getTargetTopicJson() {
        return targetTopicJson;
    }

    public void setTargetTopicJson(String targetTopicJson) {
        this.targetTopicJson = targetTopicJson;
    }

    public String getTargetTopicId() {
        return targetTopicId;
    }

    public void setTargetTopicId(String targetTopicId) {
        this.targetTopicId = targetTopicId;
    }

    public String getTargetCommentId() {
        return targetCommentId;
    }

    public void setTargetCommentId(String targetCommentId) {
        this.targetCommentId = targetCommentId;
    }

    public String getTargetCommentUserName() {
        return targetCommentUserName;
    }

    public void setTargetCommentUserName(String targetCommentUserName) {
        this.targetCommentUserName = targetCommentUserName;
    }

    public String getTargetCommentContent() {
        return targetCommentContent;
    }

    public void setTargetCommentContent(String targetCommentContent) {
        this.targetCommentContent = targetCommentContent;
    }

    public Integer getIsCommentOrigin() {
        return isCommentOrigin;
    }

    public void setIsCommentOrigin(Integer isCommentOrigin) {
        this.isCommentOrigin = isCommentOrigin;
    }

    public Integer getIsMention() {
        return isMention;
    }

    public void setIsMention(Integer isMention) {
        this.isMention = isMention;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getParentType() {
        return parentType;
    }

    public void setParentType(Integer parentType) {
        this.parentType = parentType;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        TopicDraft that = (TopicDraft) o;

        return id.equals(that.id);

    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }

    public void setIsCommentOrigin(boolean isCommentOrigin){
        setIsCommentOrigin(isCommentOrigin ? 1 : 0);
    }

    public void setIsMention(boolean isMention){
        setIsMention(isMention ? 0 : 1);
    }

    public boolean isCommentOrRepostConcurrently(){
        if(getIsCommentOrigin() != null && getIsCommentOrigin() == 1){
            return true;
        }
        return false;
    }

    public void setIsCommentOrRepostConcurrently(boolean flag){
        setIsCommentOrigin(flag);
    }

    private transient Topic topic, targetTopic;

    public Topic getTopic(){
        if(topic == null){
            topic = generateTopic();
        }
        return topic;
    }

    public Topic getTargetTopic(){
        if(getTargetTopicJson() != null && targetTopic == null){
            targetTopic = Topic.fromJson(getTargetTopicJson());
        }
        return targetTopic;
    }

    public String getDesc(){
        if(content != null){
            return content;
        }else {
            return "";
        }
    }

    public String getRepostContent(){
        switch (getType()){
            case TopicDraftHelper.PUBLISH_COMMENT:
                if(CommonUtil.noEmpty(getTargetCommentUserName(), getTargetCommentContent())){
                    return getContent() + "//" + "@" + getTargetCommentUserName() + ":" + getTargetCommentContent();
                }
                break;
            case TopicDraftHelper.REPLY_COMMENT:
                if(CommonUtil.noEmpty(getTargetCommentUserName(), getTargetCommentContent())){
                    return "回复" + "@" + getTargetCommentUserName() + ":" + getContent()
                            + "//" + "@" + getTargetCommentUserName() + ":" + getTargetCommentContent()
                            + "//" + "@" + getTargetTopic().getUserInfo().getName() + ":" + getTargetTopic().getContent();
                }
                break;
            default:
                break;
        }
        return getContent();
    }

    public Topic generateTopic(){
        return TopicDraftHelper.getTopic(this);
    }

    public int getNotificationId() {
        return notificationId;
    }

    public void setNotificationId(int notificationId) {
        this.notificationId = notificationId;
    }
    // KEEP METHODS END

}
