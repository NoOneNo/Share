package com.hengye.share.model.greenrobot;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHARE_JSON".
*/
public class ShareJsonDao extends AbstractDao<ShareJson, String> {

    public static final String TABLENAME = "SHARE_JSON";

    /**
     * Properties of entity ShareJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Model = new Property(0, String.class, "model", true, "MODEL");
        public final static Property Json = new Property(1, String.class, "json", false, "JSON");
    }

    private DaoSession daoSession;


    public ShareJsonDao(DaoConfig config) {
        super(config);
    }
    
    public ShareJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHARE_JSON\" (" + //
                "\"MODEL\" TEXT PRIMARY KEY NOT NULL ," + // 0: model
                "\"JSON\" TEXT);"); // 1: json
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHARE_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShareJson entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getModel());
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShareJson entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getModel());
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }
    }

    @Override
    protected final void attachEntity(ShareJson entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public ShareJson readEntity(Cursor cursor, int offset) {
        ShareJson entity = new ShareJson( //
            cursor.getString(offset + 0), // model
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // json
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShareJson entity, int offset) {
        entity.setModel(cursor.getString(offset + 0));
        entity.setJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ShareJson entity, long rowId) {
        return entity.getModel();
    }
    
    @Override
    public String getKey(ShareJson entity) {
        if(entity != null) {
            return entity.getModel();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShareJson entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
