package com.hengye.share.model.greenrobot;

import com.hengye.share.model.greenrobot.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SHARE_JSON".
 */
public class ShareJson implements java.io.Serializable {

    /** Not-null value. */
    private String model;
    private String json;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShareJsonDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ShareJson() {
    }

    public ShareJson(String model) {
        this.model = model;
    }

    public ShareJson(String model, String json) {
        this.model = model;
        this.json = json;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShareJsonDao() : null;
    }

    /** Not-null value. */
    public String getModel() {
        return model;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModel(String model) {
        this.model = model;
    }

    public String getJson() {
        return json;
    }

    public void setJson(String json) {
        this.json = json;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
